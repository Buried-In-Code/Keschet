plugins {
	id 'application'
	id 'com.github.ben-manes.versions' version '0.29.0'
}

repositories {
	mavenCentral()
	mavenLocal()
	jcenter()
}

application {
	mainClassName = "github.macro.Keschet"
	applicationName = "Keschet"
}

def loggerVersion = '2.13.3'
def junitVersion = '5.7.0-M1'

dependencies {
	implementation group: 'org.jetbrains', name: 'annotations', version: "19.0.0"
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "$loggerVersion"
	runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: "$loggerVersion"
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "$junitVersion"
	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "$junitVersion"
}

compileJava {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

compileTestJava {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

jar {
	manifest.attributes provider: 'gradle'
	manifest.attributes 'Main-Class': mainClassName
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

run {
	standardInput = System.in
}

test {
	useJUnitPlatform()
}

def isNonStable = { String version ->
	def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
	def regex = /^[0-9,.v-]+(-r)?$/
	return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
	checkForGradleUpdate = false

	// Example 1: reject all non stable versions
	rejectVersionIf {
		isNonStable(candidate.version)
	}

	// Example 2: disallow release candidates as upgradable versions from stable versions
	rejectVersionIf {
		isNonStable(candidate.version) && !isNonStable(currentVersion)
	}

	// Example 3: using the full syntax
	resolutionStrategy {
		componentSelection {
			all {
				if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
					reject('Release candidate')
				}
			}
		}
	}
}