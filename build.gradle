plugins {
	id 'application'
	id 'com.github.ben-manes.versions' version '0.39.0'
}

repositories {
	mavenCentral()
	mavenLocal()
}

mainClassName = "github.macro.Keschet"

dependencies {
	implementation group: 'org.jetbrains', name: 'annotations', version: "21.0.1"

	//Log4j
	def logVersion = "2.14.1"
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "$logVersion"
	runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: "$logVersion"

	//JUnit
	def junitVersion = "5.8.0-M1"
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "$junitVersion"
	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "$junitVersion"
}

compileJava {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

compileTestJava {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

run {
	standardInput = System.in
}

test {
	useJUnitPlatform()
}

jar {
	manifest.attributes provider: 'gradle'
}

def isNonStable = { String version ->
	def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { key -> version.toUpperCase().contains(key) }
	def regex = /^[0-9,.v-]+(-r)?$/
	return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
	checkForGradleUpdate = false

	// Example 1: reject all non stable versions
	rejectVersionIf {
		isNonStable(candidate.version)
	}

	// Example 2: disallow release candidates as upgradable versions from stable versions
	rejectVersionIf {
		isNonStable(candidate.version) && !isNonStable(currentVersion)
	}

	// Example 3: using the full syntax
	resolutionStrategy {
		componentSelection {
			all {
				if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
					reject('Release candidate')
				}
			}
		}
	}
}